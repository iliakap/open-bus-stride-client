"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Open Bus Stride API
 * ### Follow planned and real-time bus statistics ðŸšŒ  Welcome to The Public Knowledge Workshop\'s Stride project. We provide usable and accurate data about the Israeli public transportation system.  For background on the project and some more detailed documentation and usage guides, see [STRIDE.md](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE.md).  Looking for a specific use-case?  * Take a look at the **user cases** APIs below. * Try one of our existing [jupyter notebooks](https://github.com/hasadna/open-bus-stride-client/blob/main/README.md#using-the-interactive-jupyter-notebooks). * Don\'t see your use-case covered here? Please [open us a ticket](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fhasadna%2Fopen-bus%2Fissues%2Fnew)!  Queries are by default limited to 100 results per query, this limit can be increased up to 500,000 results. Please try to set appropriate query parameters to limit the results to reduce load on our DB. If you do need to get large number of results (up to 500,000) it\'s recommended to use one of these methods:  1. Use HTTP streaming and JSON streaming decoder, this method is most efficient and provide accurate results.    Our [Stride Python Client iterate method](https://github.com/hasadna/open-bus-stride-client#usage) uses this method. 2. Use combination of limit / offset parameters to get results by page. This method may be less accurate because    it depends on data remaining unchanged between requests.  For more advanced usage-  * Use **gtfs** for data about the planned lines timetables.  * Use **siri** for data about lines real-time * See [Open Bus Stride Data Model](https://github.com/hasadna/open-bus-stride-db/blob/main/DATA_MODEL.md) for description of field and table names. * See [Open Bus Stride ETL Processes](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE_ETL_PROCESSES.md) for description of the ETL processes which fetch and aggregate the data. * See [MOT Developer Information](https://www.gov.il/BlobFolder/generalpage/gtfs_general_transit_feed_specifications/he/GTFS%20-%20Developer%20Information.pdf) for description of the source fields as published by the Israel Ministry of Transportation.
 *
 * The version of the OpenAPI document: 161d1ee7535e16c2bff40d97e829ee1ed9f59bae
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SiriApi = void 0;
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var SiriApi = /** @class */ (function (_super) {
    __extends(SiriApi, _super);
    function SiriApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Return a single siri ride stop based on id
     * Get
     */
    SiriApi.prototype.siriRideStopsGetGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling siriRideStopsGetGet.');
                        }
                        queryParameters = {};
                        if (requestParameters.id !== undefined) {
                            queryParameters['id'] = requestParameters.id;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_ride_stops/get",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.SiriRideStopPydanticModelFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Return a single siri ride stop based on id
     * Get
     */
    SiriApi.prototype.siriRideStopsGetGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriRideStopsGetGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List of siri ride stops.
     * List
     */
    SiriApi.prototype.siriRideStopsListGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.getCount !== undefined) {
                            queryParameters['get_count'] = requestParameters.getCount;
                        }
                        if (requestParameters.siriStopIds !== undefined) {
                            queryParameters['siri_stop_ids'] = requestParameters.siriStopIds;
                        }
                        if (requestParameters.siriRideIds !== undefined) {
                            queryParameters['siri_ride_ids'] = requestParameters.siriRideIds;
                        }
                        if (requestParameters.siriVehicleLocationLonGreaterOrEqual !== undefined) {
                            queryParameters['siri_vehicle_location__lon__greater_or_equal'] = requestParameters.siriVehicleLocationLonGreaterOrEqual;
                        }
                        if (requestParameters.siriVehicleLocationLonLowerOrEqual !== undefined) {
                            queryParameters['siri_vehicle_location__lon__lower_or_equal'] = requestParameters.siriVehicleLocationLonLowerOrEqual;
                        }
                        if (requestParameters.siriVehicleLocationLatGreaterOrEqual !== undefined) {
                            queryParameters['siri_vehicle_location__lat__greater_or_equal'] = requestParameters.siriVehicleLocationLatGreaterOrEqual;
                        }
                        if (requestParameters.siriVehicleLocationLatLowerOrEqual !== undefined) {
                            queryParameters['siri_vehicle_location__lat__lower_or_equal'] = requestParameters.siriVehicleLocationLatLowerOrEqual;
                        }
                        if (requestParameters.siriVehicleLocationRecordedAtTimeFrom !== undefined) {
                            queryParameters['siri_vehicle_location__recorded_at_time_from'] = requestParameters.siriVehicleLocationRecordedAtTimeFrom.toISOString();
                        }
                        if (requestParameters.siriVehicleLocationRecordedAtTimeTo !== undefined) {
                            queryParameters['siri_vehicle_location__recorded_at_time_to'] = requestParameters.siriVehicleLocationRecordedAtTimeTo.toISOString();
                        }
                        if (requestParameters.siriRideScheduledStartTimeFrom !== undefined) {
                            queryParameters['siri_ride__scheduled_start_time_from'] = requestParameters.siriRideScheduledStartTimeFrom.toISOString();
                        }
                        if (requestParameters.siriRideScheduledStartTimeTo !== undefined) {
                            queryParameters['siri_ride__scheduled_start_time_to'] = requestParameters.siriRideScheduledStartTimeTo.toISOString();
                        }
                        if (requestParameters.gtfsStopLatGreaterOrEqual !== undefined) {
                            queryParameters['gtfs_stop__lat__greater_or_equal'] = requestParameters.gtfsStopLatGreaterOrEqual;
                        }
                        if (requestParameters.gtfsStopLatLowerOrEqual !== undefined) {
                            queryParameters['gtfs_stop__lat__lower_or_equal'] = requestParameters.gtfsStopLatLowerOrEqual;
                        }
                        if (requestParameters.gtfsStopLonGreaterOrEqual !== undefined) {
                            queryParameters['gtfs_stop__lon__greater_or_equal'] = requestParameters.gtfsStopLonGreaterOrEqual;
                        }
                        if (requestParameters.gtfsStopLonLowerOrEqual !== undefined) {
                            queryParameters['gtfs_stop__lon__lower_or_equal'] = requestParameters.gtfsStopLonLowerOrEqual;
                        }
                        if (requestParameters.gtfsDateFrom !== undefined) {
                            queryParameters['gtfs_date_from'] = requestParameters.gtfsDateFrom.toISOString().substr(0, 10);
                        }
                        if (requestParameters.gtfsDateTo !== undefined) {
                            queryParameters['gtfs_date_to'] = requestParameters.gtfsDateTo.toISOString().substr(0, 10);
                        }
                        if (requestParameters.orderBy !== undefined) {
                            queryParameters['order_by'] = requestParameters.orderBy;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_ride_stops/list",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.SiriRideStopWithRelatedPydanticModelFromJSON); })];
                }
            });
        });
    };
    /**
     * List of siri ride stops.
     * List
     */
    SiriApi.prototype.siriRideStopsListGet = function (requestParameters, initOverrides) {
        if (requestParameters === void 0) { requestParameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriRideStopsListGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Return a single siri ride based on id
     * Get
     */
    SiriApi.prototype.siriRidesGetGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling siriRidesGetGet.');
                        }
                        queryParameters = {};
                        if (requestParameters.id !== undefined) {
                            queryParameters['id'] = requestParameters.id;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_rides/get",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.SiriRidePydanticModelFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Return a single siri ride based on id
     * Get
     */
    SiriApi.prototype.siriRidesGetGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriRidesGetGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List of siri rides.
     * List
     */
    SiriApi.prototype.siriRidesListGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.getCount !== undefined) {
                            queryParameters['get_count'] = requestParameters.getCount;
                        }
                        if (requestParameters.gtfsRouteDateFrom !== undefined) {
                            queryParameters['gtfs_route__date_from'] = requestParameters.gtfsRouteDateFrom.toISOString().substr(0, 10);
                        }
                        if (requestParameters.gtfsRouteDateTo !== undefined) {
                            queryParameters['gtfs_route__date_to'] = requestParameters.gtfsRouteDateTo.toISOString().substr(0, 10);
                        }
                        if (requestParameters.gtfsRouteLineRefs !== undefined) {
                            queryParameters['gtfs_route__line_refs'] = requestParameters.gtfsRouteLineRefs;
                        }
                        if (requestParameters.gtfsRouteOperatorRefs !== undefined) {
                            queryParameters['gtfs_route__operator_refs'] = requestParameters.gtfsRouteOperatorRefs;
                        }
                        if (requestParameters.gtfsRouteRouteShortName !== undefined) {
                            queryParameters['gtfs_route__route_short_name'] = requestParameters.gtfsRouteRouteShortName;
                        }
                        if (requestParameters.gtfsRouteRouteLongNameContains !== undefined) {
                            queryParameters['gtfs_route__route_long_name_contains'] = requestParameters.gtfsRouteRouteLongNameContains;
                        }
                        if (requestParameters.gtfsRouteRouteMkt !== undefined) {
                            queryParameters['gtfs_route__route_mkt'] = requestParameters.gtfsRouteRouteMkt;
                        }
                        if (requestParameters.gtfsRouteRouteDirection !== undefined) {
                            queryParameters['gtfs_route__route_direction'] = requestParameters.gtfsRouteRouteDirection;
                        }
                        if (requestParameters.gtfsRouteRouteAlternative !== undefined) {
                            queryParameters['gtfs_route__route_alternative'] = requestParameters.gtfsRouteRouteAlternative;
                        }
                        if (requestParameters.gtfsRouteAgencyName !== undefined) {
                            queryParameters['gtfs_route__agency_name'] = requestParameters.gtfsRouteAgencyName;
                        }
                        if (requestParameters.gtfsRouteRouteType !== undefined) {
                            queryParameters['gtfs_route__route_type'] = requestParameters.gtfsRouteRouteType;
                        }
                        if (requestParameters.gtfsRideGtfsRouteId !== undefined) {
                            queryParameters['gtfs_ride__gtfs_route_id'] = requestParameters.gtfsRideGtfsRouteId;
                        }
                        if (requestParameters.gtfsRideJourneyRefPrefix !== undefined) {
                            queryParameters['gtfs_ride__journey_ref_prefix'] = requestParameters.gtfsRideJourneyRefPrefix;
                        }
                        if (requestParameters.gtfsRideStartTimeFrom !== undefined) {
                            queryParameters['gtfs_ride__start_time_from'] = requestParameters.gtfsRideStartTimeFrom.toISOString();
                        }
                        if (requestParameters.gtfsRideStartTimeTo !== undefined) {
                            queryParameters['gtfs_ride__start_time_to'] = requestParameters.gtfsRideStartTimeTo.toISOString();
                        }
                        if (requestParameters.siriRouteIds !== undefined) {
                            queryParameters['siri_route_ids'] = requestParameters.siriRouteIds;
                        }
                        if (requestParameters.siriRouteLineRefs !== undefined) {
                            queryParameters['siri_route__line_refs'] = requestParameters.siriRouteLineRefs;
                        }
                        if (requestParameters.siriRouteOperatorRefs !== undefined) {
                            queryParameters['siri_route__operator_refs'] = requestParameters.siriRouteOperatorRefs;
                        }
                        if (requestParameters.journeyRefPrefix !== undefined) {
                            queryParameters['journey_ref_prefix'] = requestParameters.journeyRefPrefix;
                        }
                        if (requestParameters.journeyRefs !== undefined) {
                            queryParameters['journey_refs'] = requestParameters.journeyRefs;
                        }
                        if (requestParameters.vehicleRefs !== undefined) {
                            queryParameters['vehicle_refs'] = requestParameters.vehicleRefs;
                        }
                        if (requestParameters.scheduledStartTimeFrom !== undefined) {
                            queryParameters['scheduled_start_time_from'] = requestParameters.scheduledStartTimeFrom.toISOString();
                        }
                        if (requestParameters.scheduledStartTimeTo !== undefined) {
                            queryParameters['scheduled_start_time_to'] = requestParameters.scheduledStartTimeTo.toISOString();
                        }
                        if (requestParameters.orderBy !== undefined) {
                            queryParameters['order_by'] = requestParameters.orderBy;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_rides/list",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.SiriRideWithRelatedPydanticModelFromJSON); })];
                }
            });
        });
    };
    /**
     * List of siri rides.
     * List
     */
    SiriApi.prototype.siriRidesListGet = function (requestParameters, initOverrides) {
        if (requestParameters === void 0) { requestParameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriRidesListGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Return a single siri route based on id
     * Get
     */
    SiriApi.prototype.siriRoutesGetGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling siriRoutesGetGet.');
                        }
                        queryParameters = {};
                        if (requestParameters.id !== undefined) {
                            queryParameters['id'] = requestParameters.id;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_routes/get",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.SiriRoutePydanticModelFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Return a single siri route based on id
     * Get
     */
    SiriApi.prototype.siriRoutesGetGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriRoutesGetGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List of siri routes.
     * List
     */
    SiriApi.prototype.siriRoutesListGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.getCount !== undefined) {
                            queryParameters['get_count'] = requestParameters.getCount;
                        }
                        if (requestParameters.lineRefs !== undefined) {
                            queryParameters['line_refs'] = requestParameters.lineRefs;
                        }
                        if (requestParameters.operatorRefs !== undefined) {
                            queryParameters['operator_refs'] = requestParameters.operatorRefs;
                        }
                        if (requestParameters.orderBy !== undefined) {
                            queryParameters['order_by'] = requestParameters.orderBy;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_routes/list",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.SiriRoutePydanticModelFromJSON); })];
                }
            });
        });
    };
    /**
     * List of siri routes.
     * List
     */
    SiriApi.prototype.siriRoutesListGet = function (requestParameters, initOverrides) {
        if (requestParameters === void 0) { requestParameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriRoutesListGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Return a single siri snapshot based on id
     * Get
     */
    SiriApi.prototype.siriSnapshotsGetGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling siriSnapshotsGetGet.');
                        }
                        queryParameters = {};
                        if (requestParameters.id !== undefined) {
                            queryParameters['id'] = requestParameters.id;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_snapshots/get",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.SiriSnapshotPydanticModelFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Return a single siri snapshot based on id
     * Get
     */
    SiriApi.prototype.siriSnapshotsGetGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriSnapshotsGetGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List of siri snapshots.
     * List
     */
    SiriApi.prototype.siriSnapshotsListGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.getCount !== undefined) {
                            queryParameters['get_count'] = requestParameters.getCount;
                        }
                        if (requestParameters.snapshotIdPrefix !== undefined) {
                            queryParameters['snapshot_id_prefix'] = requestParameters.snapshotIdPrefix;
                        }
                        if (requestParameters.orderBy !== undefined) {
                            queryParameters['order_by'] = requestParameters.orderBy;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_snapshots/list",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.SiriSnapshotPydanticModelFromJSON); })];
                }
            });
        });
    };
    /**
     * List of siri snapshots.
     * List
     */
    SiriApi.prototype.siriSnapshotsListGet = function (requestParameters, initOverrides) {
        if (requestParameters === void 0) { requestParameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriSnapshotsListGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Return a single siri stop based on id
     * Get
     */
    SiriApi.prototype.siriStopsGetGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling siriStopsGetGet.');
                        }
                        queryParameters = {};
                        if (requestParameters.id !== undefined) {
                            queryParameters['id'] = requestParameters.id;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_stops/get",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.SiriStopPydanticModelFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Return a single siri stop based on id
     * Get
     */
    SiriApi.prototype.siriStopsGetGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriStopsGetGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List of siri stops.
     * List
     */
    SiriApi.prototype.siriStopsListGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.getCount !== undefined) {
                            queryParameters['get_count'] = requestParameters.getCount;
                        }
                        if (requestParameters.codes !== undefined) {
                            queryParameters['codes'] = requestParameters.codes;
                        }
                        if (requestParameters.orderBy !== undefined) {
                            queryParameters['order_by'] = requestParameters.orderBy;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_stops/list",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.SiriStopPydanticModelFromJSON); })];
                }
            });
        });
    };
    /**
     * List of siri stops.
     * List
     */
    SiriApi.prototype.siriStopsListGet = function (requestParameters, initOverrides) {
        if (requestParameters === void 0) { requestParameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriStopsListGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Return a single siri vehicle location based on id
     * Get
     */
    SiriApi.prototype.siriVehicleLocationsGetGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling siriVehicleLocationsGetGet.');
                        }
                        queryParameters = {};
                        if (requestParameters.id !== undefined) {
                            queryParameters['id'] = requestParameters.id;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_vehicle_locations/get",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.SiriVehicleLocationPydanticModelFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Return a single siri vehicle location based on id
     * Get
     */
    SiriApi.prototype.siriVehicleLocationsGetGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriVehicleLocationsGetGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List of siri vehicle locations.
     * List
     */
    SiriApi.prototype.siriVehicleLocationsListGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.limit !== undefined) {
                            queryParameters['limit'] = requestParameters.limit;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.getCount !== undefined) {
                            queryParameters['get_count'] = requestParameters.getCount;
                        }
                        if (requestParameters.siriVehicleLocationIds !== undefined) {
                            queryParameters['siri_vehicle_location_ids'] = requestParameters.siriVehicleLocationIds;
                        }
                        if (requestParameters.siriSnapshotIds !== undefined) {
                            queryParameters['siri_snapshot_ids'] = requestParameters.siriSnapshotIds;
                        }
                        if (requestParameters.siriRideStopIds !== undefined) {
                            queryParameters['siri_ride_stop_ids'] = requestParameters.siriRideStopIds;
                        }
                        if (requestParameters.recordedAtTimeFrom !== undefined) {
                            queryParameters['recorded_at_time_from'] = requestParameters.recordedAtTimeFrom.toISOString();
                        }
                        if (requestParameters.recordedAtTimeTo !== undefined) {
                            queryParameters['recorded_at_time_to'] = requestParameters.recordedAtTimeTo.toISOString();
                        }
                        if (requestParameters.lonGreaterOrEqual !== undefined) {
                            queryParameters['lon__greater_or_equal'] = requestParameters.lonGreaterOrEqual;
                        }
                        if (requestParameters.lonLowerOrEqual !== undefined) {
                            queryParameters['lon__lower_or_equal'] = requestParameters.lonLowerOrEqual;
                        }
                        if (requestParameters.latGreaterOrEqual !== undefined) {
                            queryParameters['lat__greater_or_equal'] = requestParameters.latGreaterOrEqual;
                        }
                        if (requestParameters.latLowerOrEqual !== undefined) {
                            queryParameters['lat__lower_or_equal'] = requestParameters.latLowerOrEqual;
                        }
                        if (requestParameters.orderBy !== undefined) {
                            queryParameters['order_by'] = requestParameters.orderBy;
                        }
                        if (requestParameters.siriRoutesLineRef !== undefined) {
                            queryParameters['siri_routes__line_ref'] = requestParameters.siriRoutesLineRef;
                        }
                        if (requestParameters.siriRoutesOperatorRef !== undefined) {
                            queryParameters['siri_routes__operator_ref'] = requestParameters.siriRoutesOperatorRef;
                        }
                        if (requestParameters.siriRidesSchedualedStartTimeFrom !== undefined) {
                            queryParameters['siri_rides__schedualed_start_time_from'] = requestParameters.siriRidesSchedualedStartTimeFrom.toISOString();
                        }
                        if (requestParameters.siriRidesSchedualedStartTimeTo !== undefined) {
                            queryParameters['siri_rides__schedualed_start_time_to'] = requestParameters.siriRidesSchedualedStartTimeTo.toISOString();
                        }
                        if (requestParameters.siriRidesIds !== undefined) {
                            queryParameters['siri_rides__ids'] = requestParameters.siriRidesIds;
                        }
                        if (requestParameters.siriRoutesIds !== undefined) {
                            queryParameters['siri_routes__ids'] = requestParameters.siriRoutesIds;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/siri_vehicle_locations/list",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.SiriVehicleLocationWithRelatedPydanticModelFromJSON); })];
                }
            });
        });
    };
    /**
     * List of siri vehicle locations.
     * List
     */
    SiriApi.prototype.siriVehicleLocationsListGet = function (requestParameters, initOverrides) {
        if (requestParameters === void 0) { requestParameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.siriVehicleLocationsListGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return SiriApi;
}(runtime.BaseAPI));
exports.SiriApi = SiriApi;
