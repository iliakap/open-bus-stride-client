/* tslint:disable */
/* eslint-disable */
/**
 * Open Bus Stride API
 * ### Follow planned and real-time bus statistics ðŸšŒ  Welcome to The Public Knowledge Workshop\'s Stride project. We provide usable and accurate data about the Israeli public transportation system.  For background on the project and some more detailed documentation and usage guides, see [STRIDE.md](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE.md).  Looking for a specific use-case?  * Take a look at the **user cases** APIs below. * Try one of our existing [jupyter notebooks](https://github.com/hasadna/open-bus-stride-client/blob/main/README.md#using-the-interactive-jupyter-notebooks). * Don\'t see your use-case covered here? Please [open us a ticket](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fhasadna%2Fopen-bus%2Fissues%2Fnew)!  Queries are by default limited to 100 results per query, this limit can be increased up to 500,000 results. Please try to set appropriate query parameters to limit the results to reduce load on our DB. If you do need to get large number of results (up to 500,000) it\'s recommended to use one of these methods:  1. Use HTTP streaming and JSON streaming decoder, this method is most efficient and provide accurate results.    Our [Stride Python Client iterate method](https://github.com/hasadna/open-bus-stride-client#usage) uses this method. 2. Use combination of limit / offset parameters to get results by page. This method may be less accurate because    it depends on data remaining unchanged between requests.  For more advanced usage-  * Use **gtfs** for data about the planned lines timetables.  * Use **siri** for data about lines real-time * See [Open Bus Stride Data Model](https://github.com/hasadna/open-bus-stride-db/blob/main/DATA_MODEL.md) for description of field and table names. * See [Open Bus Stride ETL Processes](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE_ETL_PROCESSES.md) for description of the ETL processes which fetch and aggregate the data. * See [MOT Developer Information](https://www.gov.il/BlobFolder/generalpage/gtfs_general_transit_feed_specifications/he/GTFS%20-%20Developer%20Information.pdf) for description of the source fields as published by the Israel Ministry of Transportation. 
 *
 * The version of the OpenAPI document: cb9ded7762b2840b0f4ecb9487f325ce4743dd94
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  SiriRidePydanticModel,
  SiriRideStopPydanticModel,
  SiriRideStopWithRelatedPydanticModel,
  SiriRideWithRelatedPydanticModel,
  SiriRoutePydanticModel,
  SiriSnapshotPydanticModel,
  SiriStopPydanticModel,
  SiriVehicleLocationPydanticModel,
  SiriVehicleLocationWithRelatedPydanticModel,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SiriRidePydanticModelFromJSON,
    SiriRidePydanticModelToJSON,
    SiriRideStopPydanticModelFromJSON,
    SiriRideStopPydanticModelToJSON,
    SiriRideStopWithRelatedPydanticModelFromJSON,
    SiriRideStopWithRelatedPydanticModelToJSON,
    SiriRideWithRelatedPydanticModelFromJSON,
    SiriRideWithRelatedPydanticModelToJSON,
    SiriRoutePydanticModelFromJSON,
    SiriRoutePydanticModelToJSON,
    SiriSnapshotPydanticModelFromJSON,
    SiriSnapshotPydanticModelToJSON,
    SiriStopPydanticModelFromJSON,
    SiriStopPydanticModelToJSON,
    SiriVehicleLocationPydanticModelFromJSON,
    SiriVehicleLocationPydanticModelToJSON,
    SiriVehicleLocationWithRelatedPydanticModelFromJSON,
    SiriVehicleLocationWithRelatedPydanticModelToJSON,
} from '../models';

export interface SiriRideStopsGetGetRequest {
    id: number;
}

export interface SiriRideStopsListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    siriStopIds?: string;
    siriRideIds?: string;
    siriVehicleLocationLonGreaterOrEqual?: number;
    siriVehicleLocationLonLowerOrEqual?: number;
    siriVehicleLocationLatGreaterOrEqual?: number;
    siriVehicleLocationLatLowerOrEqual?: number;
    siriVehicleLocationRecordedAtTimeFrom?: Date;
    siriVehicleLocationRecordedAtTimeTo?: Date;
    siriRideScheduledStartTimeFrom?: Date;
    siriRideScheduledStartTimeTo?: Date;
    gtfsStopLatGreaterOrEqual?: number;
    gtfsStopLatLowerOrEqual?: number;
    gtfsStopLonGreaterOrEqual?: number;
    gtfsStopLonLowerOrEqual?: number;
    gtfsDateFrom?: Date;
    gtfsDateTo?: Date;
    orderBy?: string;
}

export interface SiriRidesGetGetRequest {
    id: number;
}

export interface SiriRidesListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    gtfsRouteDateFrom?: Date;
    gtfsRouteDateTo?: Date;
    gtfsRouteLineRefs?: string;
    gtfsRouteOperatorRefs?: string;
    gtfsRouteRouteShortName?: string;
    gtfsRouteRouteLongNameContains?: string;
    gtfsRouteRouteMkt?: string;
    gtfsRouteRouteDirection?: string;
    gtfsRouteRouteAlternative?: string;
    gtfsRouteAgencyName?: string;
    gtfsRouteRouteType?: string;
    gtfsRideGtfsRouteId?: number;
    gtfsRideJourneyRefPrefix?: string;
    gtfsRideStartTimeFrom?: Date;
    gtfsRideStartTimeTo?: Date;
    siriRouteIds?: string;
    siriRouteLineRefs?: string;
    siriRouteOperatorRefs?: string;
    journeyRefPrefix?: string;
    journeyRefs?: string;
    vehicleRefs?: string;
    scheduledStartTimeFrom?: Date;
    scheduledStartTimeTo?: Date;
    orderBy?: string;
}

export interface SiriRoutesGetGetRequest {
    id: number;
}

export interface SiriRoutesListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    lineRefs?: string;
    operatorRefs?: string;
    orderBy?: string;
}

export interface SiriSnapshotsGetGetRequest {
    id: number;
}

export interface SiriSnapshotsListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    snapshotIdPrefix?: string;
    orderBy?: string;
}

export interface SiriStopsGetGetRequest {
    id: number;
}

export interface SiriStopsListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    codes?: string;
    orderBy?: string;
}

export interface SiriVehicleLocationsGetGetRequest {
    id: number;
}

export interface SiriVehicleLocationsListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    siriVehicleLocationIds?: string;
    siriSnapshotIds?: string;
    siriRideStopIds?: string;
    recordedAtTimeFrom?: Date;
    recordedAtTimeTo?: Date;
    lonGreaterOrEqual?: number;
    lonLowerOrEqual?: number;
    latGreaterOrEqual?: number;
    latLowerOrEqual?: number;
    orderBy?: string;
    siriRoutesLineRef?: string;
    siriRoutesOperatorRef?: string;
    siriRidesSchedualedStartTimeFrom?: Date;
    siriRidesSchedualedStartTimeTo?: Date;
    siriRidesIds?: string;
    siriRoutesIds?: string;
}

/**
 * 
 */
export class SiriApi extends runtime.BaseAPI {

    /**
     * Return a single siri ride stop based on id
     * Get 
     */
    async siriRideStopsGetGetRaw(requestParameters: SiriRideStopsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriRideStopPydanticModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling siriRideStopsGetGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_ride_stops/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriRideStopPydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri ride stop based on id
     * Get 
     */
    async siriRideStopsGetGet(requestParameters: SiriRideStopsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriRideStopPydanticModel> {
        const response = await this.siriRideStopsGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri ride stops.
     * List 
     */
    async siriRideStopsListGetRaw(requestParameters: SiriRideStopsListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriRideStopWithRelatedPydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.getCount !== undefined) {
            queryParameters['get_count'] = requestParameters.getCount;
        }

        if (requestParameters.siriStopIds !== undefined) {
            queryParameters['siri_stop_ids'] = requestParameters.siriStopIds;
        }

        if (requestParameters.siriRideIds !== undefined) {
            queryParameters['siri_ride_ids'] = requestParameters.siriRideIds;
        }

        if (requestParameters.siriVehicleLocationLonGreaterOrEqual !== undefined) {
            queryParameters['siri_vehicle_location__lon__greater_or_equal'] = requestParameters.siriVehicleLocationLonGreaterOrEqual;
        }

        if (requestParameters.siriVehicleLocationLonLowerOrEqual !== undefined) {
            queryParameters['siri_vehicle_location__lon__lower_or_equal'] = requestParameters.siriVehicleLocationLonLowerOrEqual;
        }

        if (requestParameters.siriVehicleLocationLatGreaterOrEqual !== undefined) {
            queryParameters['siri_vehicle_location__lat__greater_or_equal'] = requestParameters.siriVehicleLocationLatGreaterOrEqual;
        }

        if (requestParameters.siriVehicleLocationLatLowerOrEqual !== undefined) {
            queryParameters['siri_vehicle_location__lat__lower_or_equal'] = requestParameters.siriVehicleLocationLatLowerOrEqual;
        }

        if (requestParameters.siriVehicleLocationRecordedAtTimeFrom !== undefined) {
            queryParameters['siri_vehicle_location__recorded_at_time_from'] = (requestParameters.siriVehicleLocationRecordedAtTimeFrom as any).toISOString();
        }

        if (requestParameters.siriVehicleLocationRecordedAtTimeTo !== undefined) {
            queryParameters['siri_vehicle_location__recorded_at_time_to'] = (requestParameters.siriVehicleLocationRecordedAtTimeTo as any).toISOString();
        }

        if (requestParameters.siriRideScheduledStartTimeFrom !== undefined) {
            queryParameters['siri_ride__scheduled_start_time_from'] = (requestParameters.siriRideScheduledStartTimeFrom as any).toISOString();
        }

        if (requestParameters.siriRideScheduledStartTimeTo !== undefined) {
            queryParameters['siri_ride__scheduled_start_time_to'] = (requestParameters.siriRideScheduledStartTimeTo as any).toISOString();
        }

        if (requestParameters.gtfsStopLatGreaterOrEqual !== undefined) {
            queryParameters['gtfs_stop__lat__greater_or_equal'] = requestParameters.gtfsStopLatGreaterOrEqual;
        }

        if (requestParameters.gtfsStopLatLowerOrEqual !== undefined) {
            queryParameters['gtfs_stop__lat__lower_or_equal'] = requestParameters.gtfsStopLatLowerOrEqual;
        }

        if (requestParameters.gtfsStopLonGreaterOrEqual !== undefined) {
            queryParameters['gtfs_stop__lon__greater_or_equal'] = requestParameters.gtfsStopLonGreaterOrEqual;
        }

        if (requestParameters.gtfsStopLonLowerOrEqual !== undefined) {
            queryParameters['gtfs_stop__lon__lower_or_equal'] = requestParameters.gtfsStopLonLowerOrEqual;
        }

        if (requestParameters.gtfsDateFrom !== undefined) {
            queryParameters['gtfs_date_from'] = (requestParameters.gtfsDateFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.gtfsDateTo !== undefined) {
            queryParameters['gtfs_date_to'] = (requestParameters.gtfsDateTo as any).toISOString().substr(0,10);
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_ride_stops/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriRideStopWithRelatedPydanticModelFromJSON));
    }

    /**
     * List of siri ride stops.
     * List 
     */
    async siriRideStopsListGet(requestParameters: SiriRideStopsListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriRideStopWithRelatedPydanticModel>> {
        const response = await this.siriRideStopsListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a single siri ride based on id
     * Get 
     */
    async siriRidesGetGetRaw(requestParameters: SiriRidesGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriRidePydanticModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling siriRidesGetGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_rides/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriRidePydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri ride based on id
     * Get 
     */
    async siriRidesGetGet(requestParameters: SiriRidesGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriRidePydanticModel> {
        const response = await this.siriRidesGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri rides.
     * List 
     */
    async siriRidesListGetRaw(requestParameters: SiriRidesListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriRideWithRelatedPydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.getCount !== undefined) {
            queryParameters['get_count'] = requestParameters.getCount;
        }

        if (requestParameters.gtfsRouteDateFrom !== undefined) {
            queryParameters['gtfs_route__date_from'] = (requestParameters.gtfsRouteDateFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.gtfsRouteDateTo !== undefined) {
            queryParameters['gtfs_route__date_to'] = (requestParameters.gtfsRouteDateTo as any).toISOString().substr(0,10);
        }

        if (requestParameters.gtfsRouteLineRefs !== undefined) {
            queryParameters['gtfs_route__line_refs'] = requestParameters.gtfsRouteLineRefs;
        }

        if (requestParameters.gtfsRouteOperatorRefs !== undefined) {
            queryParameters['gtfs_route__operator_refs'] = requestParameters.gtfsRouteOperatorRefs;
        }

        if (requestParameters.gtfsRouteRouteShortName !== undefined) {
            queryParameters['gtfs_route__route_short_name'] = requestParameters.gtfsRouteRouteShortName;
        }

        if (requestParameters.gtfsRouteRouteLongNameContains !== undefined) {
            queryParameters['gtfs_route__route_long_name_contains'] = requestParameters.gtfsRouteRouteLongNameContains;
        }

        if (requestParameters.gtfsRouteRouteMkt !== undefined) {
            queryParameters['gtfs_route__route_mkt'] = requestParameters.gtfsRouteRouteMkt;
        }

        if (requestParameters.gtfsRouteRouteDirection !== undefined) {
            queryParameters['gtfs_route__route_direction'] = requestParameters.gtfsRouteRouteDirection;
        }

        if (requestParameters.gtfsRouteRouteAlternative !== undefined) {
            queryParameters['gtfs_route__route_alternative'] = requestParameters.gtfsRouteRouteAlternative;
        }

        if (requestParameters.gtfsRouteAgencyName !== undefined) {
            queryParameters['gtfs_route__agency_name'] = requestParameters.gtfsRouteAgencyName;
        }

        if (requestParameters.gtfsRouteRouteType !== undefined) {
            queryParameters['gtfs_route__route_type'] = requestParameters.gtfsRouteRouteType;
        }

        if (requestParameters.gtfsRideGtfsRouteId !== undefined) {
            queryParameters['gtfs_ride__gtfs_route_id'] = requestParameters.gtfsRideGtfsRouteId;
        }

        if (requestParameters.gtfsRideJourneyRefPrefix !== undefined) {
            queryParameters['gtfs_ride__journey_ref_prefix'] = requestParameters.gtfsRideJourneyRefPrefix;
        }

        if (requestParameters.gtfsRideStartTimeFrom !== undefined) {
            queryParameters['gtfs_ride__start_time_from'] = (requestParameters.gtfsRideStartTimeFrom as any).toISOString();
        }

        if (requestParameters.gtfsRideStartTimeTo !== undefined) {
            queryParameters['gtfs_ride__start_time_to'] = (requestParameters.gtfsRideStartTimeTo as any).toISOString();
        }

        if (requestParameters.siriRouteIds !== undefined) {
            queryParameters['siri_route_ids'] = requestParameters.siriRouteIds;
        }

        if (requestParameters.siriRouteLineRefs !== undefined) {
            queryParameters['siri_route__line_refs'] = requestParameters.siriRouteLineRefs;
        }

        if (requestParameters.siriRouteOperatorRefs !== undefined) {
            queryParameters['siri_route__operator_refs'] = requestParameters.siriRouteOperatorRefs;
        }

        if (requestParameters.journeyRefPrefix !== undefined) {
            queryParameters['journey_ref_prefix'] = requestParameters.journeyRefPrefix;
        }

        if (requestParameters.journeyRefs !== undefined) {
            queryParameters['journey_refs'] = requestParameters.journeyRefs;
        }

        if (requestParameters.vehicleRefs !== undefined) {
            queryParameters['vehicle_refs'] = requestParameters.vehicleRefs;
        }

        if (requestParameters.scheduledStartTimeFrom !== undefined) {
            queryParameters['scheduled_start_time_from'] = (requestParameters.scheduledStartTimeFrom as any).toISOString();
        }

        if (requestParameters.scheduledStartTimeTo !== undefined) {
            queryParameters['scheduled_start_time_to'] = (requestParameters.scheduledStartTimeTo as any).toISOString();
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_rides/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriRideWithRelatedPydanticModelFromJSON));
    }

    /**
     * List of siri rides.
     * List 
     */
    async siriRidesListGet(requestParameters: SiriRidesListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriRideWithRelatedPydanticModel>> {
        const response = await this.siriRidesListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a single siri route based on id
     * Get 
     */
    async siriRoutesGetGetRaw(requestParameters: SiriRoutesGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriRoutePydanticModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling siriRoutesGetGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_routes/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriRoutePydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri route based on id
     * Get 
     */
    async siriRoutesGetGet(requestParameters: SiriRoutesGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriRoutePydanticModel> {
        const response = await this.siriRoutesGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri routes.
     * List 
     */
    async siriRoutesListGetRaw(requestParameters: SiriRoutesListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriRoutePydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.getCount !== undefined) {
            queryParameters['get_count'] = requestParameters.getCount;
        }

        if (requestParameters.lineRefs !== undefined) {
            queryParameters['line_refs'] = requestParameters.lineRefs;
        }

        if (requestParameters.operatorRefs !== undefined) {
            queryParameters['operator_refs'] = requestParameters.operatorRefs;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_routes/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriRoutePydanticModelFromJSON));
    }

    /**
     * List of siri routes.
     * List 
     */
    async siriRoutesListGet(requestParameters: SiriRoutesListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriRoutePydanticModel>> {
        const response = await this.siriRoutesListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a single siri snapshot based on id
     * Get 
     */
    async siriSnapshotsGetGetRaw(requestParameters: SiriSnapshotsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriSnapshotPydanticModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling siriSnapshotsGetGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_snapshots/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriSnapshotPydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri snapshot based on id
     * Get 
     */
    async siriSnapshotsGetGet(requestParameters: SiriSnapshotsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriSnapshotPydanticModel> {
        const response = await this.siriSnapshotsGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri snapshots.
     * List 
     */
    async siriSnapshotsListGetRaw(requestParameters: SiriSnapshotsListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriSnapshotPydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.getCount !== undefined) {
            queryParameters['get_count'] = requestParameters.getCount;
        }

        if (requestParameters.snapshotIdPrefix !== undefined) {
            queryParameters['snapshot_id_prefix'] = requestParameters.snapshotIdPrefix;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_snapshots/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriSnapshotPydanticModelFromJSON));
    }

    /**
     * List of siri snapshots.
     * List 
     */
    async siriSnapshotsListGet(requestParameters: SiriSnapshotsListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriSnapshotPydanticModel>> {
        const response = await this.siriSnapshotsListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a single siri stop based on id
     * Get 
     */
    async siriStopsGetGetRaw(requestParameters: SiriStopsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriStopPydanticModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling siriStopsGetGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_stops/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriStopPydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri stop based on id
     * Get 
     */
    async siriStopsGetGet(requestParameters: SiriStopsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriStopPydanticModel> {
        const response = await this.siriStopsGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri stops.
     * List 
     */
    async siriStopsListGetRaw(requestParameters: SiriStopsListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriStopPydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.getCount !== undefined) {
            queryParameters['get_count'] = requestParameters.getCount;
        }

        if (requestParameters.codes !== undefined) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_stops/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriStopPydanticModelFromJSON));
    }

    /**
     * List of siri stops.
     * List 
     */
    async siriStopsListGet(requestParameters: SiriStopsListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriStopPydanticModel>> {
        const response = await this.siriStopsListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a single siri vehicle location based on id
     * Get 
     */
    async siriVehicleLocationsGetGetRaw(requestParameters: SiriVehicleLocationsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriVehicleLocationPydanticModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling siriVehicleLocationsGetGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_vehicle_locations/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriVehicleLocationPydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri vehicle location based on id
     * Get 
     */
    async siriVehicleLocationsGetGet(requestParameters: SiriVehicleLocationsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriVehicleLocationPydanticModel> {
        const response = await this.siriVehicleLocationsGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri vehicle locations.
     * List 
     */
    async siriVehicleLocationsListGetRaw(requestParameters: SiriVehicleLocationsListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriVehicleLocationWithRelatedPydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.getCount !== undefined) {
            queryParameters['get_count'] = requestParameters.getCount;
        }

        if (requestParameters.siriVehicleLocationIds !== undefined) {
            queryParameters['siri_vehicle_location_ids'] = requestParameters.siriVehicleLocationIds;
        }

        if (requestParameters.siriSnapshotIds !== undefined) {
            queryParameters['siri_snapshot_ids'] = requestParameters.siriSnapshotIds;
        }

        if (requestParameters.siriRideStopIds !== undefined) {
            queryParameters['siri_ride_stop_ids'] = requestParameters.siriRideStopIds;
        }

        if (requestParameters.recordedAtTimeFrom !== undefined) {
            queryParameters['recorded_at_time_from'] = (requestParameters.recordedAtTimeFrom as any).toISOString();
        }

        if (requestParameters.recordedAtTimeTo !== undefined) {
            queryParameters['recorded_at_time_to'] = (requestParameters.recordedAtTimeTo as any).toISOString();
        }

        if (requestParameters.lonGreaterOrEqual !== undefined) {
            queryParameters['lon__greater_or_equal'] = requestParameters.lonGreaterOrEqual;
        }

        if (requestParameters.lonLowerOrEqual !== undefined) {
            queryParameters['lon__lower_or_equal'] = requestParameters.lonLowerOrEqual;
        }

        if (requestParameters.latGreaterOrEqual !== undefined) {
            queryParameters['lat__greater_or_equal'] = requestParameters.latGreaterOrEqual;
        }

        if (requestParameters.latLowerOrEqual !== undefined) {
            queryParameters['lat__lower_or_equal'] = requestParameters.latLowerOrEqual;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.siriRoutesLineRef !== undefined) {
            queryParameters['siri_routes__line_ref'] = requestParameters.siriRoutesLineRef;
        }

        if (requestParameters.siriRoutesOperatorRef !== undefined) {
            queryParameters['siri_routes__operator_ref'] = requestParameters.siriRoutesOperatorRef;
        }

        if (requestParameters.siriRidesSchedualedStartTimeFrom !== undefined) {
            queryParameters['siri_rides__schedualed_start_time_from'] = (requestParameters.siriRidesSchedualedStartTimeFrom as any).toISOString();
        }

        if (requestParameters.siriRidesSchedualedStartTimeTo !== undefined) {
            queryParameters['siri_rides__schedualed_start_time_to'] = (requestParameters.siriRidesSchedualedStartTimeTo as any).toISOString();
        }

        if (requestParameters.siriRidesIds !== undefined) {
            queryParameters['siri_rides__ids'] = requestParameters.siriRidesIds;
        }

        if (requestParameters.siriRoutesIds !== undefined) {
            queryParameters['siri_routes__ids'] = requestParameters.siriRoutesIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/siri_vehicle_locations/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriVehicleLocationWithRelatedPydanticModelFromJSON));
    }

    /**
     * List of siri vehicle locations.
     * List 
     */
    async siriVehicleLocationsListGet(requestParameters: SiriVehicleLocationsListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriVehicleLocationWithRelatedPydanticModel>> {
        const response = await this.siriVehicleLocationsListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
